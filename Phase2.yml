AWSTemplateFormatVersion: '2010-09-09'
Description: 'Phase 2: Database Migration'

Parameters:
  MainVPC:
    Type: String
  VPCName:
    Type: String

  Subnet1AZ:
    Type: String
  Subnet2AZ:
    Type: String
  DBSubnet1CIDR:
    Type: String
  DBSubnet2CIDR:
    Type: String
  DBSubnet1Name:
    Type: String
  DBSubnet2Name:
    Type: String

  PRIVATEKEYPAIRNAME:
    Type: String
  PUBLICKEYPAIRNAME:
    Type: String

  EC2V2SGNAME:
    Type: String
  LBSGName:
    Type: String
  DBSGName:
    Type: String
  ASGSGName:
    Type: String

  # EC2 instance parameters
  INSTANCETYPE2:
    Type: String
  INSTANCETYPE3:
    Type: String
  DBINSTANCETYPE:
    Type: String
  EC2INSTANCE2AMIID:
    Type: String
  EC2InstanceProfile:
    Type: String
  EC2V2NAME:
    Type: String
  EC2V3NAME:
    Type: String
  ASGNAME:
    Type: String
  RDSINSTANCEIDENTIFIER:
    Type: String
  AUTOSCALINGTARGET:
    Type: String

  # Subnets from parent
  PubSubnet1:
    Type: String
  PubSubnet2:
    Type: String
  PrivSubnet1:
    Type: String
  PrivSubnet2:
    Type: String

  # Phase 3
  PHASE3STACKURL:
    Type: String
  STACKURL:
    Type: String

  EnableMultiAZ:
    Type: String
    Description: "Set to 'true' to enable Multi-AZ, 'false' for single-AZ"
    Default: "false"
    AllowedValues:
      - "true"
      - "false"

  SECRETNAME:
    Type: String
  SECRETUSERNAME:
    Type: String
  SECRETPASSWORD:
    Type: String
  SECRETDBNAME:
    Type: String
  SECRETDESCRIPTION:
    Type: String

  EC2V1SecurityGroup:
    Type: String
  EC2V1PrivateIP:
    Type: String

Resources:
  # -----------------------------------------------------------
  # VPC Subnets
  # -----------------------------------------------------------
  DBSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: !Ref DBSubnet1CIDR
      AvailabilityZone: !Ref Subnet1AZ
      Tags:
        - Key: Name
          Value: !Ref DBSubnet1Name

  DBSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: !Ref DBSubnet2CIDR
      AvailabilityZone: !Ref Subnet2AZ
      Tags:
        - Key: Name
          Value: !Ref DBSubnet2Name
  
  DBRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MainVPC
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref VPCName
              - DB-Route-Table

  # -----------------------------------------------------------
  # Route Table Associations
  # -----------------------------------------------------------
  DBRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref DBRouteTable
      SubnetId: !Ref DBSubnet1

  DBRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref DBRouteTable
      SubnetId: !Ref DBSubnet2

  # -----------------------------------------------------------
  # Security Groups
  # -----------------------------------------------------------
  EC2V2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2V2 Security Group
      VpcId: !Ref MainVPC
      Tags:
        - Key: Name
          Value: !Ref EC2V2SGNAME
        
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DB Security Group
      VpcId: !Ref MainVPC
      SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            SourceSecurityGroupId: !Ref EC2V2SecurityGroup
      Tags:
        - Key: Name
          Value: !Ref DBSGName

  EC2V2SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2V2SecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !GetAtt DBSecurityGroup.GroupId

  EC2V2SecurityGroupIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2V2SecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  # -----------------------------------------------------------
  # DB Instance
  # -----------------------------------------------------------
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Inventory RDS Subnet Group"
      DBSubnetGroupName: "RDS-Subnet-Group"
      SubnetIds:
        - !Ref DBSubnet1
        - !Ref DBSubnet2
      Tags:
        - Key: Name
          Value: "RDS-Subnet-Group"

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Ref RDSINSTANCEIDENTIFIER
      DBInstanceClass: !Ref DBINSTANCETYPE
      Engine: mysql
      # Single-AZ
      MultiAZ: false
      StorageType: gp3
      AllocatedStorage: '20'
      DBSubnetGroupName: !Ref RDSSubnetGroup
      MonitoringInterval: 0  # Disables Enhanced Monitoring
      # If you want to force an AZ, add:
      AvailabilityZone: !Ref Subnet1AZ
      MasterUsername: !Ref SECRETUSERNAME
      MasterUserPassword: !Ref SECRETPASSWORD
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      BackupRetentionPeriod: 1
      # Optional: disable performance insights, etc.
      EnablePerformanceInsights: false

  DatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Ref SECRETNAME
      Description: "Database secret for web app"
      # The 'host' will be the final RDS endpoint
      SecretString: !Sub |
        {
          "user": "${SECRETUSERNAME}",
          "password": "${SECRETPASSWORD}",
          "host": "${RDSInstance.Endpoint.Address}",
          "db": "${SECRETDBNAME}"
        }

  # -----------------------------------------------------------
  # Instances
  # -----------------------------------------------------------
  EphemeralSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Ephemeral EC2"
      VpcId: !Ref MainVPC
      # Example: allow ephemeral to SSH out. Also allow ephemeral to receive SSH if needed.
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref EC2V1SecurityGroup
      Tags:
        - Key: Name
          Value: "EphemeralSG"

  EC2V1SecurityGroupIngressEphemeral:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2V1SecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !GetAtt EphemeralSG.GroupId

  EphemeralSGIngressDB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt EphemeralSG.GroupId
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !GetAtt DBSecurityGroup.GroupId

  DBSecurityGroupIngressEphemeral:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt DBSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !GetAtt EphemeralSG.GroupId

  EphemeralEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref EC2INSTANCE2AMIID
      IamInstanceProfile: !Ref EC2InstanceProfile
      SubnetId: !Ref PrivSubnet1
      KeyName: !Ref PUBLICKEYPAIRNAME
      SecurityGroupIds:
        - !Ref EphemeralSG
      Tags:
        - Key: Name
          Value: "EPHEMERAL-EC2"

      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          

          # ----------------------------------------------------------
          # 1) INSTALL AWS CLI AND SSH CLIENT ON EPHEMERAL_EC2
          # ----------------------------------------------------------
          apt update -y
          apt install -y awscli jq mysql-client openssh-client

          cd /home/ubuntu
          sleep 10
          # ----------------------------------------------------------
          # 2) OBTAIN SSH PRIVATE KEY FROM S3
          # ----------------------------------------------------------
          wget ${STACKURL}${PUBLICKEYPAIRNAME}.pem -O ec2v1_key.pem
          chmod 400 ec2v1_key.pem
          # ----------------------------------------------------------
          # 2) CREATE MySQL DUMP ON EC2V1, THEN COPY BACK TO EPHEMERAL_EC2
          # ----------------------------------------------------------
          echo "Creating MySQL dump on EC2V1..."
          
          ssh -o "StrictHostKeyChecking=no" \
              -i ec2v1_key.pem \
              ubuntu@${EC2V1PrivateIP} \
              "mysqldump -h localhost -u nodeapp -pstudent12 --databases STUDENTS > /tmp/data.sql"

          echo "MySQL dump created on EC2V1. Copying data.sql to EphemeralEC2..."
          scp -o "StrictHostKeyChecking=no" \
              -i ec2v1_key.pem \
              ubuntu@${EC2V1PrivateIP}:/tmp/data.sql /tmp/data.sql

          # ----------------------------------------------------------
          # 3) IMPORT MySQL DUMP INTO RDS
          # ----------------------------------------------------------
          echo "Importing MySQL dump into RDS from EphemeralEC2..."
          mysql -h ${RDSInstance.Endpoint.Address} -u ${SECRETUSERNAME} -p${SECRETPASSWORD} -e "CREATE DATABASE ${SECRETDBNAME};"
          mysql -h ${RDSInstance.Endpoint.Address} -u ${SECRETUSERNAME} -p${SECRETPASSWORD} ${SECRETDBNAME} < /tmp/data.sql

          echo "All ephemeral tasks completed."
          # Optional: self-terminate after completion:
          # shutdown -h now
    DependsOn:
      - EphemeralSG
      - EC2V2Instance
      - RDSInstance
      
  EC2V2Instance:
    Type: AWS::EC2::Instance
    DependsOn: RDSInstance
    Properties:
      InstanceType: !Ref INSTANCETYPE2
      ImageId: !Ref EC2INSTANCE2AMIID
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Ref PUBLICKEYPAIRNAME
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          GroupSet:
            - !GetAtt EC2V2SecurityGroup.GroupId
          SubnetId: !Ref PubSubnet1
      Tags:
        - Key: Name
          Value: !Ref EC2V2NAME
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          apt update -y
          apt install nodejs unzip wget npm mysql-client -y
          #wget https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/CUR-TF-200-ACCAP1-1-DEV/code.zip -P /home/ubuntu
          wget https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/CUR-TF-200-ACCAP1-1-91571/1-lab-capstone-project-1/code.zip -P /home/ubuntu
          cd /home/ubuntu
          unzip code.zip -x "resources/codebase_partner/node_modules/*"
          cd resources/codebase_partner
          npm install aws aws-sdk
          export APP_PORT=80
          npm start &
          echo '#!/bin/bash -xe
          cd /home/ubuntu/resources/codebase_partner
          export APP_PORT=80
          npm start' > /etc/rc.local
          chmod +x /etc/rc.local

  Phase3Stack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Ref PHASE3STACKURL
      Parameters:
        MainVPC: !Ref MainVPC
        PubSubnet1: !Ref PubSubnet1
        PubSubnet2: !Ref PubSubnet2
        PrivSubnet1: !Ref PrivSubnet1
        PrivSubnet2: !Ref PrivSubnet2

        LBSGName: !Ref LBSGName
        ASGSGName: !Ref ASGSGName

        PRIVATEKEYPAIRNAME: !Ref PRIVATEKEYPAIRNAME

        DBSecurityGroup: !GetAtt DBSecurityGroup.GroupId
        
        EC2INSTANCE2AMIID: !Ref EC2INSTANCE2AMIID
        INSTANCETYPE3: !Ref INSTANCETYPE3
        EC2InstanceProfile: !Ref EC2InstanceProfile
        EC2V2NAME: !Ref EC2V2NAME
        EC2V3NAME: !Ref EC2V3NAME
        ASGNAME: !Ref ASGNAME
        AUTOSCALINGTARGET: !Ref AUTOSCALINGTARGET
        # EC2V1_PrivateIP: !Ref EC2V1PrivateIP
        # RDSInstanceEndpoint: !GetAtt RDSInstance.Endpoint.Address
        # SECRET_USERNAME: !Ref SECRETUSERNAME
        # SECRET_PASSWORD:  !Ref SECRETPASSWORD
    DependsOn:
      - EC2V2Instance
      - RDSInstance

# -----------------------------------------------------------
# Outputs
# -----------------------------------------------------------
Outputs:
  EC2V2InstanceIP:
    Description: Public IP of the EC2 instance
    Value: !GetAtt EC2V2Instance.PublicIp
