AWSTemplateFormatVersion: '2010-09-09'
Description: 'Phase 3: Implementing Application Scaling and High Availability'

Parameters:
  MainVPC:
    Type: String

  PubSubnet1: # Public Subnet 1 ID  
    Type: String
  PubSubnet2: # Public Subnet 2 ID
    Type: String
  PrivSubnet1: # Private Subnet 1 ID
    Type: String
  PrivSubnet2: # Private Subnet 2 ID
    Type: String

  PRIVATEKEYPAIRNAME:
    Type: String

  LBSGName:
    Type: String
  ASGSGName:
    Type: String

  EC2V2NAME:
    Type: String
  EC2V3NAME:
    Type: String
  ASGNAME:
    Type: String

  INSTANCETYPE3:
    Type: String
  EC2InstanceProfile:
    Type: String
  AUTOSCALINGTARGET:
    Type: String
  EC2INSTANCE2AMIID:
    Type: String

  DBSecurityGroup: # Security Group ID for the Database
    Type: String

Resources:
  # -----------------------------------------------------------
  # Security Groups
  # -----------------------------------------------------------
  ASGSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ASG Security Group
      VpcId: !Ref MainVPC
      Tags:
        - Key: Name
          Value: !Ref ASGSGName

  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load Balancer Security Group
      VpcId: !Ref MainVPC
      Tags:
        - Key: Name
          Value: !Ref LBSGName

  ASGSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt ASGSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !GetAtt LBSecurityGroup.GroupId

  LBSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt LBSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: '0.0.0.0/0'

  ASGSecurityGroupIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt ASGSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref DBSecurityGroup

  DBSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref DBSecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !GetAtt ASGSecurityGroup.GroupId

  # -----------------------------------------------------------
  # Target Group, Load Balancer, Listener
  # -----------------------------------------------------------
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref MainVPC

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref LBSGName
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt LBSecurityGroup.GroupId
      Subnets:
        - !Ref PubSubnet1
        - !Ref PubSubnet2
      Type: application

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  # -----------------------------------------------------------
  # Launch Template, Auto Scaling Group, Scaling Policy
  # -----------------------------------------------------------
  LaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: !Join [ "-", [ !Ref ASGNAME, "LaunchTemplate" ] ]
      LaunchTemplateData:
        ImageId: !Ref EC2INSTANCE2AMIID
        InstanceType: !Ref INSTANCETYPE3
        KeyName: !Ref PRIVATEKEYPAIRNAME
        IamInstanceProfile:
          Name: !Ref EC2InstanceProfile
        SecurityGroupIds:
          - !GetAtt ASGSecurityGroup.GroupId
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            apt update -y
            apt install nodejs unzip wget npm mysql-client -y
            #wget https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/CUR-TF-200-ACCAP1-1-DEV/code.zip -P /home/ubuntu
            wget https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/CUR-TF-200-ACCAP1-1-91571/1-lab-capstone-project-1/code.zip -P /home/ubuntu
            cd /home/ubuntu
            unzip code.zip -x "resources/codebase_partner/node_modules/*"
            cd resources/codebase_partner
            npm install aws aws-sdk
            export APP_PORT=80
            npm start &
            echo '#!/bin/bash -xe
            cd /home/ubuntu/resources/codebase_partner
            export APP_PORT=80
            npm start' > /etc/rc.local
            chmod +x /etc/rc.local

  AutoScalingGroup: 
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AutoScalingGroupName: !Ref ASGNAME
      DesiredCapacity: '2'
      MinSize: '2'
      MaxSize: '6'
      VPCZoneIdentifier:
        - !Ref PrivSubnet1
        - !Ref PrivSubnet2
      TargetGroupARNs:
        - !Ref TargetGroup
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Ref EC2V3NAME
          PropagateAtLaunch: true
        - Key: Phase
          Value: '3'
          PropagateAtLaunch: true
    DependsOn:
      - LaunchTemplate
      - TargetGroup
      - ASGSecurityGroupIngress
      - LBSecurityGroupIngress
      - ASGSecurityGroupIngress2

  ScalingPolicy:
      Type: AWS::AutoScaling::ScalingPolicy
      Properties:
        AutoScalingGroupName: !Ref AutoScalingGroup
        Cooldown: '60'
        EstimatedInstanceWarmup: 300
        PolicyType: TargetTrackingScaling
        TargetTrackingConfiguration:
          PredefinedMetricSpecification:
            PredefinedMetricType: ASGAverageCPUUtilization
          TargetValue: !Ref AUTOSCALINGTARGET

# -----------------------------------------------------------
# Outputs
# -----------------------------------------------------------
Outputs:

  LoadBalancerDNSName:
    Description: DNS name of the load balancer
    Value: !GetAtt LoadBalancer.DNSName
